--------------------------------


********************************


--------------------------------


Unit Tests


> TEST_CASE:  ./test_set1/1.rb


>>> LEXER
LexToken(PRINT,'print',1,21)
LexToken(STRING,'"\\nThis program contains a single word/line comment\\n"',1,27)


>>> PARSER EVALUATION
Abstract Syntax Tree (Leveled BFS)
['program']
['single_statement']
['statement']
[('print', 'print_statement')]
[(['"\\nThis program contains a single word/line comment\\n"'], 'factor')]


> TEST_CASE:  ./test_set1/2.rb


>>> LEXER
LexToken(PRINT,'print',1,41)
LexToken(STRING,'"\\nThis program contains a multiline comment\\n"',1,47)


>>> PARSER EVALUATION
Abstract Syntax Tree (Leveled BFS)
['program']
['single_statement']
['statement']
[('print', 'print_statement')]
[(['"\\nThis program contains a multiline comment\\n"'], 'factor')]


> TEST_CASE:  ./test_set1/3.rb


>>> LEXER
LexToken(ID,'my_num',1,51)
LexToken(ASS_OP,'=',1,58)
LexToken(INTEGER,25,1,60)
LexToken(PRINT,'print',1,64)
LexToken(ID,'my_num',1,70)


>>> PARSER EVALUATION
Abstract Syntax Tree (Leveled BFS)
['program']
['statements+statement']
['statement', 'single_statement']
[('my_num=', 'var_declaration'), 'statement']
[([25], 'factor'), ('print', 'print_statement')]
[(['my_num'], 'factor')]


> TEST_CASE:  ./test_set1/4.rb


>>> LEXER
LexToken(CONSTANT,'Const',1,264)
LexToken(ASS_OP,'=',1,270)
LexToken(INTEGER,22,1,272)
LexToken(PRINT,'print',1,275)
LexToken(CONSTANT,'Const',1,281)
LexToken(PRINT,'print',1,287)
LexToken(STRING,'"\\n"',1,293)


>>> PARSER EVALUATION
Abstract Syntax Tree (Leveled BFS)
['program']
['statements+statement']
['statement', 'statements+statement']
[('Const=', 'const_declaration'), 'statement', 'single_statement']
[([22], 'factor'), ('print', 'print_statement'), 'statement']
[(['Const'], 'factor'), ('print', 'print_statement')]
[(['"\\n"'], 'factor')]


> TEST_CASE:  ./test_set1/5.rb


>>> LEXER
LexToken(ID,'full_name',1,30)
LexToken(ASS_OP,'=',1,40)
LexToken(STRING,'"Ramon\\n"',1,42)
LexToken(PRINT,'print',1,52)
LexToken(STRING,'"\\nMy name is "',1,58)
LexToken(PLUS,'+',1,74)
LexToken(ID,'full_name',1,76)


>>> PARSER EVALUATION
Abstract Syntax Tree (Leveled BFS)
['program']
['statements+statement']
['statement', 'single_statement']
[('full_name=', 'var_declaration'), 'statement']
[(['"Ramon\\n"'], 'factor'), ('print', 'print_statement')]
['expression']
[(['+'], 'math_expression')]
['math_expression', 'term']
['term', (['full_name'], 'factor')]
[(['"\\nMy name is "'], 'factor')]


> TEST_CASE:  ./test_set1/6.rb


>>> LEXER
LexToken(PRINT,'print',1,28)
LexToken(STRING,'"\\nBool, int and string\\n"',1,34)
LexToken(ID,'first_arg',1,64)
LexToken(ASS_OP,'=',1,74)
LexToken(BOOL,'true',1,76)
LexToken(ID,'secorn_arg',1,81)
LexToken(ASS_OP,'=',1,92)
LexToken(BOOL,'false',1,94)
LexToken(ID,'boolean_eval',1,100)
LexToken(ASS_OP,'=',1,113)
LexToken(ID,'first_arg',1,115)
LexToken(OR,'or',1,125)
LexToken(ID,'secorn_arg',1,128)
LexToken(CONSTANT,'Const',1,139)
LexToken(ASS_OP,'=',1,145)
LexToken(INTEGER,42,1,147)
LexToken(ID,'n',1,150)
LexToken(ASS_OP,'=',1,151)
LexToken(INTEGER,0,1,152)
LexToken(ID,'n',1,154)
LexToken(ASS_OP,'=',1,155)
LexToken(ID,'n',1,156)
LexToken(PLUS,'+',1,157)
LexToken(INTEGER,1,1,158)
LexToken(ID,'name',1,162)
LexToken(ASS_OP,'=',1,167)
LexToken(STRING,'"Ramon "',1,169)
LexToken(PLUS,'+',1,178)
LexToken(STRING,'"Romero"',1,180)
LexToken(PRINT,'print',1,190)
LexToken(ID,'boolean_eval',1,196)
LexToken(PRINT,'print',1,210)
LexToken(STRING,'"\\n"',1,216)
LexToken(PRINT,'print',1,221)
LexToken(ID,'n',1,227)
LexToken(PRINT,'print',1,230)
LexToken(STRING,'"\\n"',1,236)
LexToken(PRINT,'print',1,241)
LexToken(CONSTANT,'Const',1,247)
LexToken(PRINT,'print',1,253)
LexToken(STRING,'"\\n"',1,259)
LexToken(PRINT,'print',1,264)
LexToken(ID,'name',1,270)


>>> PARSER EVALUATION
Abstract Syntax Tree (Leveled BFS)
['program']
['statements+statement']
['statement', 'statements+statement']
[('print', 'print_statement'), 'statement', 'statements+statement']
[(['"\\nBool, int and string\\n"'], 'factor'), ('first_arg=', 'var_declaration'), 'statement', 'statements+statement']
[(['true'], 'factor'), ('secorn_arg=', 'var_declaration'), 'statement', 'statements+statement']
[(['false'], 'factor'), ('boolean_eval=', 'var_declaration'), 'statement', 'statements+statement']
['expression', ('Const=', 'const_declaration'), 'statement', 'statements+statement']
[('or', 'relational_expression'), ([42], 'factor'), ('n=', 'var_declaration'), 'statement', 'statements+statement']
['math_expression', 'math_expression', ([0], 'factor'), ('n=', 'var_declaration'), 'statement', 'statements+statement']
['term', 'term', 'expression', ('name=', 'var_declaration'), 'statement', 'statements+statement']
[(['first_arg'], 'factor'), (['secorn_arg'], 'factor'), (['+'], 'math_expression'), 'expression', ('print', 'print_statement'), 'statement', 'statements+statement']
['math_expression', 'term', (['+'], 'math_expression'), (['boolean_eval'], 'factor'), ('print', 'print_statement'), 'statement', 'statements+statement']
['term', ([1], 'factor'), 'math_expression', 'term', (['"\\n"'], 'factor'), ('print', 'print_statement'), 'statement', 'statements+statement']
[(['n'], 'factor'), 'term', (['"Romero"'], 'factor'), (['n'], 'factor'), ('print', 'print_statement'), 'statement', 'statements+statement']
[(['"Ramon "'], 'factor'), (['"\\n"'], 'factor'), ('print', 'print_statement'), 'statement', 'single_statement']
[(['Const'], 'factor'), ('print', 'print_statement'), 'statement']
[(['"\\n"'], 'factor'), ('print', 'print_statement')]
[(['name'], 'factor')]


> TEST_CASE:  ./test_set1/7.rb


>>> LEXER
LexToken(PRINT,'print',1,1)
LexToken(STRING,'"\\nCycle, if, else\\n"',1,7)
LexToken(ID,'a',1,31)
LexToken(ASS_OP,'=',1,32)
LexToken(INTEGER,1,1,33)
LexToken(WHILE,'while',1,35)
LexToken(ID,'a',1,41)
LexToken(LT,'<',1,42)
LexToken(INTEGER,11,1,43)
LexToken(DO,'do',1,46)
LexToken(PRINT,'print',1,53)
LexToken(ID,'a',1,59)
LexToken(IF,'if',1,65)
LexToken(ID,'a',1,68)
LexToken(MODULO,'%',1,69)
LexToken(INTEGER,2,1,70)
LexToken(EQ,'==',1,72)
LexToken(INTEGER,0,1,75)
LexToken(THEN,'then',1,77)
LexToken(PRINT,'print',1,90)
LexToken(STRING,'" Romero"',1,96)
LexToken(ELSE,'else',1,111)
LexToken(PRINT,'print',1,124)
LexToken(STRING,'" Ramon"',1,130)
LexToken(END,'end',1,144)
LexToken(ID,'a',1,152)
LexToken(ASS_OP,'=',1,154)
LexToken(ID,'a',1,156)
LexToken(PLUS,'+',1,158)
LexToken(INTEGER,1,1,160)
LexToken(PRINT,'print',1,166)
LexToken(STRING,'"\\n"',1,172)
LexToken(END,'end',1,179)


>>> PARSER EVALUATION
Abstract Syntax Tree (Leveled BFS)
['program']
['statements+statement']
['statement', 'statements+statement']
[('print', 'print_statement'), 'statement', 'single_statement']
[(['"\\nCycle, if, else\\n"'], 'factor'), ('a=', 'var_declaration'), 'statement']
[([1], 'factor'), (['while', 'do', 'end'], 'while_statement')]
['expression', 'statements+statement']
[('<', 'relational_expression'), 'statement', 'statements+statement']
['math_expression', 'math_expression', ('print', 'print_statement'), 'statement', 'statements+statement']
['term', 'term', (['a'], 'factor'), (['if', 'then', 'else', 'end'], 'if_else_statement'), 'statement', 'single_statement']
[(['a'], 'factor'), ([11], 'factor'), 'expression', 'single_statement', 'single_statement', ('a=', 'var_declaration'), 'statement']
[('==', 'relational_expression'), 'statement', 'statement', 'expression', ('print', 'print_statement')]
['math_expression', 'math_expression', ('print', 'print_statement'), ('print', 'print_statement'), (['+'], 'math_expression'), (['"\\n"'], 'factor')]
[('%', 'term'), 'term', (['" Romero"'], 'factor'), (['" Ramon"'], 'factor'), 'math_expression', 'term']
[(['a'], 'factor'), 'term', ([0], 'factor'), 'term', ([1], 'factor')]
[([2], 'factor'), (['a'], 'factor')]


> TEST_CASE:  ./test_set1/8.rb


>>> LEXER
LexToken(PRINT,'print',1,1)
LexToken(STRING,'"\\nWhat is you name ? ->"',1,7)
LexToken(ID,'name',1,33)
LexToken(ASS_OP,'=',1,38)
LexToken(INPUT_S,'gets.chomp',1,40)
LexToken(PRINT,'print',1,52)
LexToken(STRING,'"Hola! "',1,58)
LexToken(PLUS,'+',1,66)
LexToken(ID,'name',1,68)
LexToken(PLUS,'+',1,73)
LexToken(STRING,'"\\n"',1,74)
LexToken(PRINT,'print',1,80)
LexToken(STRING,'"Age? ->"',1,86)
LexToken(ID,'n',1,96)
LexToken(ASS_OP,'=',1,98)
LexToken(INPUT_I,'gets.chomp.to_i',1,100)
LexToken(ID,'n',1,116)
LexToken(ASS_OP,'=',1,118)
LexToken(ID,'n',1,120)
LexToken(PLUS,'+',1,121)
LexToken(INTEGER,1,1,122)
LexToken(PRINT,'print',1,125)
LexToken(STRING,'"\\nnext year you will have "',1,131)
LexToken(PRINT,'print',1,161)
LexToken(ID,'n',1,167)
LexToken(PRINT,'print',1,170)
LexToken(STRING,'"\\n"',1,176)


>>> PARSER EVALUATION
Abstract Syntax Tree (Leveled BFS)
['program']
['statements+statement']
['statement', 'statements+statement']
[('print', 'print_statement'), 'statement', 'statements+statement']
[(['"\\nWhat is you name ? ->"'], 'factor'), ('name=', 'var_declaration'), 'statement', 'statements+statement']
[('gets.chomp', 'input_statement'), ('print', 'print_statement'), 'statement', 'statements+statement']
['expression', ('print', 'print_statement'), 'statement', 'statements+statement']
[(['+'], 'math_expression'), (['"Age? ->"'], 'factor'), ('n=', 'var_declaration'), 'statement', 'statements+statement']
[(['+'], 'math_expression'), 'term', ('gets.chomp.to_i', 'input_statement'), ('n=', 'var_declaration'), 'statement', 'statements+statement']
['math_expression', 'term', (['"\\n"'], 'factor'), 'expression', ('print', 'print_statement'), 'statement', 'single_statement']
['term', (['name'], 'factor'), (['+'], 'math_expression'), (['"\\nnext year you will have "'], 'factor'), ('print', 'print_statement'), 'statement']
[(['"Hola! "'], 'factor'), 'math_expression', 'term', (['n'], 'factor'), ('print', 'print_statement')]
['term', ([1], 'factor'), (['"\\n"'], 'factor')]
[(['n'], 'factor')]


> TEST_CASE:  ./test_set1/9.rb


>>> LEXER
LexToken(PRINT,'print',1,21)
LexToken(STRING,'"\\nThis program contains a single word/line comment\\n"',1,27)
LexToken(PRINT,'print',1,127)
LexToken(STRING,'"\\nThis program contains a multiline comment\\n"',1,133)
LexToken(ID,'my_num',1,236)
LexToken(ASS_OP,'=',1,243)
LexToken(INTEGER,25,1,245)
LexToken(PRINT,'print',1,249)
LexToken(ID,'my_num',1,255)
LexToken(CONSTANT,'Const',1,529)
LexToken(ASS_OP,'=',1,535)
LexToken(INTEGER,22,1,537)
LexToken(PRINT,'print',1,540)
LexToken(CONSTANT,'Const',1,546)
LexToken(PRINT,'print',1,552)
LexToken(STRING,'"\\n"',1,558)
LexToken(ID,'full_name',1,596)
LexToken(ASS_OP,'=',1,606)
LexToken(STRING,'"Ramon\\n"',1,608)
LexToken(PRINT,'print',1,618)
LexToken(STRING,'"\\nMy name is "',1,624)
LexToken(PLUS,'+',1,640)
LexToken(ID,'full_name',1,642)
LexToken(PRINT,'print',1,682)
LexToken(STRING,'"\\nBool, int and string\\n"',1,688)
LexToken(ID,'first_arg',1,718)
LexToken(ASS_OP,'=',1,728)
LexToken(BOOL,'true',1,730)
LexToken(ID,'secorn_arg',1,735)
LexToken(ASS_OP,'=',1,746)
LexToken(BOOL,'false',1,748)
LexToken(ID,'boolean_eval',1,754)
LexToken(ASS_OP,'=',1,767)
LexToken(ID,'first_arg',1,769)
LexToken(OR,'or',1,779)
LexToken(ID,'secorn_arg',1,782)
LexToken(CONSTANT,'Cons',1,793)
LexToken(ASS_OP,'=',1,798)
LexToken(INTEGER,42,1,800)
LexToken(ID,'n',1,803)
LexToken(ASS_OP,'=',1,804)
LexToken(INTEGER,0,1,805)
LexToken(ID,'n',1,807)
LexToken(ASS_OP,'=',1,808)
LexToken(ID,'n',1,809)
LexToken(PLUS,'+',1,810)
LexToken(INTEGER,1,1,811)
LexToken(ID,'name',1,815)
LexToken(ASS_OP,'=',1,820)
LexToken(STRING,'"Ramon "',1,822)
LexToken(PLUS,'+',1,831)
LexToken(STRING,'"Romero"',1,833)
LexToken(PRINT,'print',1,843)
LexToken(ID,'boolean_eval',1,849)
LexToken(PRINT,'print',1,863)
LexToken(STRING,'"\\n"',1,869)
LexToken(PRINT,'print',1,874)
LexToken(ID,'n',1,880)
LexToken(PRINT,'print',1,883)
LexToken(STRING,'"\\n"',1,889)
LexToken(PRINT,'print',1,894)
LexToken(CONSTANT,'Cons',1,900)
LexToken(PRINT,'print',1,905)
LexToken(STRING,'"\\n"',1,911)
LexToken(PRINT,'print',1,916)
LexToken(ID,'name',1,922)
LexToken(PRINT,'print',1,935)
LexToken(STRING,'"\\nCycle, if, else\\n"',1,941)
LexToken(ID,'a',1,965)
LexToken(ASS_OP,'=',1,966)
LexToken(INTEGER,1,1,967)
LexToken(WHILE,'while',1,969)
LexToken(ID,'a',1,975)
LexToken(LT,'<',1,976)
LexToken(INTEGER,11,1,977)
LexToken(DO,'do',1,980)
LexToken(PRINT,'print',1,987)
LexToken(ID,'a',1,993)
LexToken(IF,'if',1,999)
LexToken(ID,'a',1,1002)
LexToken(MODULO,'%',1,1003)
LexToken(INTEGER,2,1,1004)
LexToken(EQ,'==',1,1006)
LexToken(INTEGER,0,1,1009)
LexToken(THEN,'then',1,1011)
LexToken(PRINT,'print',1,1024)
LexToken(STRING,'" Romero"',1,1030)
LexToken(ELSE,'else',1,1045)
LexToken(PRINT,'print',1,1058)
LexToken(STRING,'" Ramon"',1,1064)
LexToken(END,'end',1,1078)
LexToken(ID,'a',1,1086)
LexToken(ASS_OP,'=',1,1088)
LexToken(ID,'a',1,1090)
LexToken(PLUS,'+',1,1092)
LexToken(INTEGER,1,1,1094)
LexToken(PRINT,'print',1,1100)
LexToken(STRING,'"\\n"',1,1106)
LexToken(END,'end',1,1113)
LexToken(PRINT,'print',1,1120)
LexToken(STRING,'"\\nWhat is you name ? ->"',1,1126)
LexToken(ID,'name',1,1152)
LexToken(ASS_OP,'=',1,1157)
LexToken(INPUT_S,'gets.chomp',1,1159)
LexToken(PRINT,'print',1,1171)
LexToken(STRING,'"Hola! "',1,1177)
LexToken(PLUS,'+',1,1185)
LexToken(ID,'name',1,1187)
LexToken(PLUS,'+',1,1192)
LexToken(STRING,'"\\n"',1,1193)
LexToken(PRINT,'print',1,1199)
LexToken(STRING,'"Age? ->"',1,1205)
LexToken(ID,'n',1,1215)
LexToken(ASS_OP,'=',1,1217)
LexToken(INPUT_I,'gets.chomp.to_i',1,1219)
LexToken(ID,'n',1,1235)
LexToken(ASS_OP,'=',1,1237)
LexToken(ID,'n',1,1239)
LexToken(PLUS,'+',1,1240)
LexToken(INTEGER,1,1,1241)
LexToken(PRINT,'print',1,1244)
LexToken(STRING,'"\\nnext year you will have "',1,1250)
LexToken(PRINT,'print',1,1280)
LexToken(ID,'n',1,1286)
LexToken(PRINT,'print',1,1289)
LexToken(STRING,'"\\n"',1,1295)


>>> PARSER EVALUATION
Abstract Syntax Tree (Leveled BFS)
['program']
['statements+statement']
['statement', 'statements+statement']
[('print', 'print_statement'), 'statement', 'statements+statement']
[(['"\\nThis program contains a single word/line comment\\n"'], 'factor'), ('print', 'print_statement'), 'statement', 'statements+statement']
[(['"\\nThis program contains a multiline comment\\n"'], 'factor'), ('my_num=', 'var_declaration'), 'statement', 'statements+statement']
[([25], 'factor'), ('print', 'print_statement'), 'statement', 'statements+statement']
[(['my_num'], 'factor'), ('Const=', 'const_declaration'), 'statement', 'statements+statement']
[([22], 'factor'), ('print', 'print_statement'), 'statement', 'statements+statement']
[(['Const'], 'factor'), ('print', 'print_statement'), 'statement', 'statements+statement']
[(['"\\n"'], 'factor'), ('full_name=', 'var_declaration'), 'statement', 'statements+statement']
[(['"Ramon\\n"'], 'factor'), ('print', 'print_statement'), 'statement', 'statements+statement']
['expression', ('print', 'print_statement'), 'statement', 'statements+statement']
[(['+'], 'math_expression'), (['"\\nBool, int and string\\n"'], 'factor'), ('first_arg=', 'var_declaration'), 'statement', 'statements+statement']
['math_expression', 'term', (['true'], 'factor'), ('secorn_arg=', 'var_declaration'), 'statement', 'statements+statement']
['term', (['full_name'], 'factor'), (['false'], 'factor'), ('boolean_eval=', 'var_declaration'), 'statement', 'statements+statement']
[(['"\\nMy name is "'], 'factor'), 'expression', ('Cons=', 'const_declaration'), 'statement', 'statements+statement']
[('or', 'relational_expression'), ([42], 'factor'), ('n=', 'var_declaration'), 'statement', 'statements+statement']
['math_expression', 'math_expression', ([0], 'factor'), ('n=', 'var_declaration'), 'statement', 'statements+statement']
['term', 'term', 'expression', ('name=', 'var_declaration'), 'statement', 'statements+statement']
[(['first_arg'], 'factor'), (['secorn_arg'], 'factor'), (['+'], 'math_expression'), 'expression', ('print', 'print_statement'), 'statement', 'statements+statement']
['math_expression', 'term', (['+'], 'math_expression'), (['boolean_eval'], 'factor'), ('print', 'print_statement'), 'statement', 'statements+statement']
['term', ([1], 'factor'), 'math_expression', 'term', (['"\\n"'], 'factor'), ('print', 'print_statement'), 'statement', 'statements+statement']
[(['n'], 'factor'), 'term', (['"Romero"'], 'factor'), (['n'], 'factor'), ('print', 'print_statement'), 'statement', 'statements+statement']
[(['"Ramon "'], 'factor'), (['"\\n"'], 'factor'), ('print', 'print_statement'), 'statement', 'statements+statement']
[(['Cons'], 'factor'), ('print', 'print_statement'), 'statement', 'statements+statement']
[(['"\\n"'], 'factor'), ('print', 'print_statement'), 'statement', 'statements+statement']
[(['name'], 'factor'), ('print', 'print_statement'), 'statement', 'statements+statement']
[(['"\\nCycle, if, else\\n"'], 'factor'), ('a=', 'var_declaration'), 'statement', 'statements+statement']
[([1], 'factor'), (['while', 'do', 'end'], 'while_statement'), 'statement', 'statements+statement']
['expression', 'statements+statement', ('print', 'print_statement'), 'statement', 'statements+statement']
[('<', 'relational_expression'), 'statement', 'statements+statement', (['"\\nWhat is you name ? ->"'], 'factor'), ('name=', 'var_declaration'), 'statement', 'statements+statement']
['math_expression', 'math_expression', ('print', 'print_statement'), 'statement', 'statements+statement', ('gets.chomp', 'input_statement'), ('print', 'print_statement'), 'statement', 'statements+statement']
['term', 'term', (['a'], 'factor'), (['if', 'then', 'else', 'end'], 'if_else_statement'), 'statement', 'single_statement', 'expression', ('print', 'print_statement'), 'statement', 'statements+statement']
[(['a'], 'factor'), ([11], 'factor'), 'expression', 'single_statement', 'single_statement', ('a=', 'var_declaration'), 'statement', (['+'], 'math_expression'), (['"Age? ->"'], 'factor'), ('n=', 'var_declaration'), 'statement', 'statements+statement']
[('==', 'relational_expression'), 'statement', 'statement', 'expression', ('print', 'print_statement'), (['+'], 'math_expression'), 'term', ('gets.chomp.to_i', 'input_statement'), ('n=', 'var_declaration'), 'statement', 'statements+statement']
['math_expression', 'math_expression', ('print', 'print_statement'), ('print', 'print_statement'), (['+'], 'math_expression'), (['"\\n"'], 'factor'), 'math_expression', 'term', (['"\\n"'], 'factor'), 'expression', ('print', 'print_statement'), 'statement', 'single_statement']
[('%', 'term'), 'term', (['" Romero"'], 'factor'), (['" Ramon"'], 'factor'), 'math_expression', 'term', 'term', (['name'], 'factor'), (['+'], 'math_expression'), (['"\\nnext year you will have "'], 'factor'), ('print', 'print_statement'), 'statement']
[(['a'], 'factor'), 'term', ([0], 'factor'), 'term', ([1], 'factor'), (['"Hola! "'], 'factor'), 'math_expression', 'term', (['n'], 'factor'), ('print', 'print_statement')]
[([2], 'factor'), (['a'], 'factor'), 'term', ([1], 'factor'), (['"\\n"'], 'factor')]
[(['n'], 'factor')]


--------------------------------


####################################################


--------------------------------


Sintactical EVALUATION Test Cases


 > TEST_CASE:: ./test_set2/1.rb


>>> LEXER
LexToken(INTEGER,25,1,115)
LexToken(ASS_OP,'=',1,118)
LexToken(ID,'my',1,121)
LexToken(ID,'num',1,124)


>>> PARSER EVALUATION
Syntax error: Unexpected INTEGER(25) on line 1
Abstract Syntax Tree (Leveled BFS)
[]


 > TEST_CASE:: ./test_set2/2.rb


>>> LEXER
LexToken(ID,'my',1,109)
LexToken(ID,'num',1,112)
LexToken(ASS_OP,'=',1,116)
LexToken(INTEGER,25,1,118)
LexToken(ID,'boolean',1,124)
LexToken(ASS_OP,'=',1,132)
LexToken(BOOL,'false',1,135)
LexToken(CONSTANT,'Cons',1,143)
LexToken(ASS_OP,'=',1,149)
LexToken(INTEGER,25,1,151)
LexToken(ID,'stri',1,156)
LexToken(ASS_OP,'=',1,162)
LexToken(STRING,'"okoko"',1,164)


>>> PARSER EVALUATION
Syntax error: Unexpected ID(num) on line 1
Abstract Syntax Tree (Leveled BFS)
['program']
['statements+statement']
['statement', 'statements+statement']
[('boolean=', 'var_declaration'), 'statement', 'single_statement']
[(['false'], 'factor'), ('Cons=', 'const_declaration'), 'statement']
[([25], 'factor'), ('stri=', 'var_declaration')]
[(['"okoko"'], 'factor')]


 > TEST_CASE:: ./test_set2/3.rb


>>> LEXER
LexToken(WHILE,'while',1,92)
LexToken(LT,'<',1,99)
LexToken(INTEGER,1,1,101)
LexToken(INTEGER,2,1,103)
LexToken(DO,'do',1,105)
LexToken(PRINT,'print',1,113)
LexToken(STRING,'"hello"',1,119)
LexToken(END,'end',1,131)


>>> PARSER EVALUATION
Syntax error: Unexpected LT(<) on line 1
Abstract Syntax Tree (Leveled BFS)
[]


--------------------------------


####################################################


--------------------------------


 SEGUNDA ENTREGA


 > TEST_CASE:: ./test_set3/1.rb


>>> LEXER
LexToken(ID,'var',1,0)
LexToken(ASS_OP,'=',1,4)
LexToken(INTEGER,41970,1,6)


>>> PARSER EVALUATION
Abstract Syntax Tree (Leveled BFS)
['program']
['single_statement']
['statement']
[('var=', 'var_declaration')]
[([41970], 'factor')]


 > TEST_CASE:: ./test_set3/2.rb


>>> LEXER
LexToken(CONSTANT,'Const',1,0)
LexToken(ASS_OP,'=',1,6)
LexToken(INTEGER,71421,1,8)


>>> PARSER EVALUATION
Abstract Syntax Tree (Leveled BFS)
['program']
['single_statement']
['statement']
[('Const=', 'const_declaration')]
[([71421], 'factor')]


 > TEST_CASE:: ./test_set3/3.rb


>>> LEXER
LexToken(PRINT,'print',1,1)
LexToken(STRING,'"\\nCycle, if, else\\n"',1,7)
LexToken(ID,'a',1,31)
LexToken(ASS_OP,'=',1,32)
LexToken(INTEGER,1,1,33)
LexToken(WHILE,'while',1,35)
LexToken(ID,'a',1,41)
LexToken(LT,'<',1,42)
LexToken(INTEGER,11,1,43)
LexToken(DO,'do',1,46)
LexToken(PRINT,'print',1,53)
LexToken(ID,'a',1,59)
LexToken(IF,'if',1,65)
LexToken(ID,'a',1,68)
LexToken(MODULO,'%',1,69)
LexToken(INTEGER,2,1,70)
LexToken(EQ,'==',1,72)
LexToken(INTEGER,0,1,75)
LexToken(THEN,'then',1,77)
LexToken(PRINT,'print',1,90)
LexToken(STRING,'" pair"',1,96)
LexToken(ELSE,'else',1,109)
LexToken(PRINT,'print',1,122)
LexToken(STRING,'" not pair"',1,128)
LexToken(END,'end',1,145)
LexToken(ID,'a',1,153)
LexToken(ASS_OP,'=',1,155)
LexToken(ID,'a',1,157)
LexToken(PLUS,'+',1,159)
LexToken(INTEGER,1,1,161)
LexToken(PRINT,'print',1,167)
LexToken(STRING,'"\\n"',1,173)
LexToken(END,'end',1,180)


>>> PARSER EVALUATION
Abstract Syntax Tree (Leveled BFS)
['program']
['statements+statement']
['statement', 'statements+statement']
[('print', 'print_statement'), 'statement', 'single_statement']
[(['"\\nCycle, if, else\\n"'], 'factor'), ('a=', 'var_declaration'), 'statement']
[([1], 'factor'), (['while', 'do', 'end'], 'while_statement')]
['expression', 'statements+statement']
[('<', 'relational_expression'), 'statement', 'statements+statement']
['math_expression', 'math_expression', ('print', 'print_statement'), 'statement', 'statements+statement']
['term', 'term', (['a'], 'factor'), (['if', 'then', 'else', 'end'], 'if_else_statement'), 'statement', 'single_statement']
[(['a'], 'factor'), ([11], 'factor'), 'expression', 'single_statement', 'single_statement', ('a=', 'var_declaration'), 'statement']
[('==', 'relational_expression'), 'statement', 'statement', 'expression', ('print', 'print_statement')]
['math_expression', 'math_expression', ('print', 'print_statement'), ('print', 'print_statement'), (['+'], 'math_expression'), (['"\\n"'], 'factor')]
[('%', 'term'), 'term', (['" pair"'], 'factor'), (['" not pair"'], 'factor'), 'math_expression', 'term']
[(['a'], 'factor'), 'term', ([0], 'factor'), 'term', ([1], 'factor')]
[([2], 'factor'), (['a'], 'factor')]


 > TEST_CASE:: ./test_set4/1.rb


>>> LEXER
LexToken(INTEGER,25,1,115)
LexToken(ASS_OP,'=',1,118)
LexToken(ID,'my',1,121)
LexToken(ID,'num',1,124)


>>> PARSER EVALUATION
Syntax error: Unexpected INTEGER(25) on line 1
Abstract Syntax Tree (Leveled BFS)
[]


 > TEST_CASE:: ./test_set4/2.rb


>>> LEXER
LexToken(ID,'my',1,109)
LexToken(ID,'num',1,112)
LexToken(ASS_OP,'=',1,116)
LexToken(INTEGER,25,1,118)
LexToken(ID,'boolean',1,124)
LexToken(ASS_OP,'=',1,132)
LexToken(BOOL,'false',1,135)
LexToken(CONSTANT,'Cons',1,143)
LexToken(ASS_OP,'=',1,149)
LexToken(INTEGER,25,1,151)
LexToken(ID,'stri',1,156)
LexToken(ASS_OP,'=',1,162)
LexToken(STRING,'"okoko"',1,164)


>>> PARSER EVALUATION
Syntax error: Unexpected ID(num) on line 1
Abstract Syntax Tree (Leveled BFS)
['program']
['statements+statement']
['statement', 'statements+statement']
[('boolean=', 'var_declaration'), 'statement', 'single_statement']
[(['false'], 'factor'), ('Cons=', 'const_declaration'), 'statement']
[([25], 'factor'), ('stri=', 'var_declaration')]
[(['"okoko"'], 'factor')]


 > TEST_CASE:: ./test_set4/3.rb


>>> LEXER
LexToken(WHILE,'while',1,92)
LexToken(LT,'<',1,99)
LexToken(INTEGER,1,1,101)
LexToken(INTEGER,2,1,103)
LexToken(DO,'do',1,105)
LexToken(PRINT,'print',1,113)
LexToken(STRING,'"hello"',1,119)
LexToken(END,'end',1,131)


>>> PARSER EVALUATION
Syntax error: Unexpected LT(<) on line 1
Abstract Syntax Tree (Leveled BFS)
[]


 > TEST_CASE:: ./test_set5/1.rb


>>> LEXER
LexToken(ID,'a',1,190)
LexToken(ASS_OP,'=',1,191)
LexToken(INTEGER,2,1,192)
LexToken(ID,'a',1,194)
LexToken(ASS_OP,'=',1,196)
LexToken(STRING,'"hello"',1,198)


>>> PARSER EVALUATION
Abstract Syntax Tree (Leveled BFS)
['program']
['statements+statement']
['statement', 'single_statement']
[('a=', 'var_declaration'), 'statement']
[([2], 'factor'), ('a=', 'var_declaration')]
[(['"hello"'], 'factor')]


 > TEST_CASE:: ./test_set5/2.rb


>>> LEXER


>>> PARSER EVALUATION
Syntax error: Unexpected end of file
Abstract Syntax Tree (Leveled BFS)
[]


 > TEST_CASE:: ./test_set5/3.rb


>>> LEXER
LexToken(IF,'if',1,0)
LexToken(INTEGER,2,1,3)
LexToken(GT,'>',1,4)
LexToken(INTEGER,4,1,5)
LexToken(THEN,'then',1,7)
LexToken(ID,'c',1,16)
LexToken(ASS_OP,'=',1,17)
LexToken(INTEGER,5,1,18)
LexToken(END,'end',1,20)
LexToken(PRINT,'print',1,24)
LexToken(ID,'c',1,30)


>>> PARSER EVALUATION
Abstract Syntax Tree (Leveled BFS)
['program']
['statements+statement']
['statement', 'single_statement']
[(['if', 'then', 'end'], 'if_statement'), 'statement']
['expression', 'single_statement', ('print', 'print_statement')]
[('>', 'relational_expression'), 'statement', (['c'], 'factor')]
['math_expression', 'math_expression', ('c=', 'var_declaration')]
['term', 'term', ([5], 'factor')]
[([2], 'factor'), ([4], 'factor')]
