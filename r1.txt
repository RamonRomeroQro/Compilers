--------------------------------


********************************


--------------------------------


Unit Tests


> TEST_CASE:  ./test_set1/1.rb


>>> LEXER
LexToken(NEWLINE,'\n\n',1,19)
LexToken(PRINT,'print',3,21)
LexToken(STRING,'"\\nThis program contains a single word/line comment\\n"',3,27)
LexToken(NEWLINE,'\n\n',3,81)


>>> PARSER ERRORS
None
<parser.Node object at 0x10355da20>
<parser.Node object at 0x10355d9e8>
<parser.Node object at 0x10355da58>
<parser.Node object at 0x10355d898>


> TEST_CASE:  ./test_set1/2.rb


>>> LEXER
LexToken(NEWLINE,'\n\n',1,39)
LexToken(PRINT,'print',3,41)
LexToken(STRING,'"\\nThis program contains a multiline comment\\n"',3,47)
LexToken(NEWLINE,'\n\n',3,94)


>>> PARSER ERRORS
None
<parser.Node object at 0x10355d8d0>
<parser.Node object at 0x10355d898>
<parser.Node object at 0x10355d908>
<parser.Node object at 0x10355d748>


> TEST_CASE:  ./test_set1/3.rb


>>> LEXER
LexToken(NEWLINE,'\n\n',1,49)
LexToken(ID,'my_num',3,51)
LexToken(ASS_OP,'=',3,58)
LexToken(INTEGER,25,3,60)
LexToken(NEWLINE,'\n\n',3,62)
LexToken(PRINT,'print',5,64)
LexToken(ID,'my_num',5,70)
LexToken(NEWLINE,'\n',5,76)


>>> PARSER ERRORS
None
<parser.Node object at 0x102c5d7f0>
<parser.Node object at 0x102c5d898>
<parser.Node object at 0x102c5da90>
<parser.Node object at 0x102c5d8d0>
<parser.Node object at 0x102c5d978>
<parser.Node object at 0x102c5da20>
<parser.Node object at 0x102b11ba8>


> TEST_CASE:  ./test_set1/4.rb


>>> LEXER
LexToken(NEWLINE,'\n\n',1,262)
LexToken(CONSTANT,'Const',3,264)
LexToken(ASS_OP,'=',3,270)
LexToken(INTEGER,22,3,272)
LexToken(NEWLINE,'\n',3,274)
LexToken(PRINT,'print',4,275)
LexToken(CONSTANT,'Const',4,281)
LexToken(NEWLINE,'\n',4,286)
LexToken(PRINT,'print',5,287)
LexToken(STRING,'"\\n"',5,293)
LexToken(NEWLINE,'\n',5,297)


>>> PARSER ERRORS
None
<parser.Node object at 0x10355d7f0>
<parser.Node object at 0x10355d898>
<parser.Node object at 0x10355da90>
<parser.Node object at 0x10355d8d0>
None
<parser.Node object at 0x10355dac8>
<parser.Node object at 0x10355db00>
<parser.Node object at 0x10355d978>
<parser.Node object at 0x10355dc50>
<parser.Node object at 0x10355dba8>
<parser.Node object at 0x103411ba8>


> TEST_CASE:  ./test_set1/5.rb


>>> LEXER
LexToken(NEWLINE,'\n\n',1,28)
LexToken(ID,'full_name',3,30)
LexToken(ASS_OP,'=',3,40)
LexToken(STRING,'"Ramon\\n"',3,42)
LexToken(NEWLINE,'\n',3,51)
LexToken(PRINT,'print',4,52)
LexToken(STRING,'"\\nMy name is "',4,58)
LexToken(PLUS,'+',4,74)
LexToken(ID,'full_name',4,76)


>>> PARSER ERRORS
None
<parser.Node object at 0x10345d860>
<parser.Node object at 0x10345d828>
None
<parser.Node object at 0x10345d940>
<parser.Node object at 0x10345d898>
<parser.Node object at 0x10345d9b0>
<parser.Node object at 0x10345dac8>
<parser.Node object at 0x10345da90>
<parser.Node object at 0x10345db70>
<parser.Node object at 0x10345da58>
<parser.Node object at 0x10345dbe0>
<parser.Node object at 0x10345d7f0>
<parser.Node object at 0x10345dc88>
<parser.Node object at 0x10345d908>
<parser.Node object at 0x103311ba8>


> TEST_CASE:  ./test_set1/6.rb


>>> LEXER
LexToken(NEWLINE,'\n\n',1,26)
LexToken(PRINT,'print',3,28)
LexToken(STRING,'"\\nBool, int and string\\n"',3,34)
LexToken(NEWLINE,'\n\n\n',3,61)
LexToken(ID,'first_arg',6,64)
LexToken(ASS_OP,'=',6,74)
LexToken(BOOL,'true',6,76)
LexToken(NEWLINE,'\n',6,80)
LexToken(ID,'secorn_arg',7,81)
LexToken(ASS_OP,'=',7,92)
LexToken(BOOL,'false',7,94)
LexToken(NEWLINE,'\n',7,99)
LexToken(ID,'boolean_eval',8,100)
LexToken(ASS_OP,'=',8,113)
LexToken(ID,'first_arg',8,115)
LexToken(OR,'or',8,125)
LexToken(ID,'secorn_arg',8,128)
LexToken(NEWLINE,'\n',8,138)
LexToken(CONSTANT,'Const',9,139)
LexToken(ASS_OP,'=',9,145)
LexToken(INTEGER,42,9,147)
LexToken(NEWLINE,'\n',9,149)
LexToken(ID,'n',10,150)
LexToken(ASS_OP,'=',10,151)
LexToken(INTEGER,0,10,152)
LexToken(NEWLINE,'\n',10,153)
LexToken(ID,'n',11,154)
LexToken(ASS_OP,'=',11,155)
LexToken(ID,'n',11,156)
LexToken(PLUS,'+',11,157)
LexToken(INTEGER,1,11,158)
LexToken(NEWLINE,'\n\n\n',11,159)
LexToken(ID,'name',14,162)
LexToken(ASS_OP,'=',14,167)
LexToken(STRING,'"Ramon "',14,169)
LexToken(PLUS,'+',14,178)
LexToken(STRING,'"Romero"',14,180)
LexToken(NEWLINE,'\n\n',14,188)
LexToken(PRINT,'print',16,190)
LexToken(ID,'boolean_eval',16,196)
LexToken(NEWLINE,'\n',16,209)
LexToken(PRINT,'print',17,210)
LexToken(STRING,'"\\n"',17,216)
LexToken(NEWLINE,'\n',17,220)
LexToken(PRINT,'print',18,221)
LexToken(ID,'n',18,227)
LexToken(NEWLINE,'\n',18,229)
LexToken(PRINT,'print',19,230)
LexToken(STRING,'"\\n"',19,236)
LexToken(NEWLINE,'\n',19,240)
LexToken(PRINT,'print',20,241)
LexToken(CONSTANT,'Const',20,247)
LexToken(NEWLINE,'\n',20,252)
LexToken(PRINT,'print',21,253)
LexToken(STRING,'"\\n"',21,259)
LexToken(NEWLINE,'\n',21,263)
LexToken(PRINT,'print',22,264)
LexToken(ID,'name',22,270)
LexToken(NEWLINE,'\n\n\n\n\n',22,274)


>>> PARSER ERRORS
None
<parser.Node object at 0x10345e8d0>
<parser.Node object at 0x10345e898>
None
<parser.Node object at 0x10345e9b0>
<parser.Node object at 0x10345e7b8>
None
<parser.Node object at 0x10345eb00>
<parser.Node object at 0x10345e908>
<parser.Node object at 0x10345eda0>
<parser.Node object at 0x10345ecf8>
<parser.Node object at 0x10345eac8>
<parser.Node object at 0x10345edd8>
<parser.Node object at 0x10345ee80>
<parser.Node object at 0x10345ee48>
<parser.Node object at 0x10345eef0>
<parser.Node object at 0x10345ee10>
<parser.Node object at 0x10345ef60>
<parser.Node object at 0x10345e978>
None
<parser.Node object at 0x10347d0f0>
<parser.Node object at 0x10345ef98>
None
<parser.Node object at 0x10347d208>
<parser.Node object at 0x10345eba8>
<parser.Node object at 0x10347d320>
<parser.Node object at 0x10347d2b0>
None
<parser.Node object at 0x10347d3c8>
<parser.Node object at 0x10347d390>
<parser.Node object at 0x10345ef28>
<parser.Node object at 0x10347d470>
<parser.Node object at 0x10347d358>
<parser.Node object at 0x10347d4a8>
<parser.Node object at 0x10347d080>
None
<parser.Node object at 0x10347d438>
<parser.Node object at 0x10347d198>
None
<parser.Node object at 0x10347d6d8>
<parser.Node object at 0x10347d6a0>
<parser.Node object at 0x10347d630>
<parser.Node object at 0x10347d780>
<parser.Node object at 0x10347d668>
<parser.Node object at 0x10347d7b8>
<parser.Node object at 0x10347d518>
<parser.Node object at 0x10347d8d0>
<parser.Node object at 0x10347d400>
None
<parser.Node object at 0x10347d748>
<parser.Node object at 0x10347d940>
<parser.Node object at 0x10347db70>
<parser.Node object at 0x10347da90>
None
<parser.Node object at 0x10347db38>
<parser.Node object at 0x10347dbe0>
<parser.Node object at 0x10347de48>
<parser.Node object at 0x10347dd30>
None
<parser.Node object at 0x10347de10>
<parser.Node object at 0x10347deb8>
<parser.Node object at 0x103480198>
<parser.Node object at 0x10347df98>
<parser.Node object at 0x103480048>
<parser.Node object at 0x1034800b8>
<parser.Node object at 0x10347df28>
<parser.Node object at 0x10347dda0>
<parser.Node object at 0x10347dc50>
<parser.Node object at 0x10347db00>
<parser.Node object at 0x10347d9b0>
<parser.Node object at 0x10347d898>
<parser.Node object at 0x10347d5c0>
<parser.Node object at 0x10347d278>
<parser.Node object at 0x10347d0b8>
<parser.Node object at 0x10345efd0>
<parser.Node object at 0x10345ec18>
<parser.Node object at 0x10345ebe0>
<parser.Node object at 0x10345eb38>
<parser.Node object at 0x103320ba8>


> TEST_CASE:  ./test_set1/7.rb


>>> LEXER
LexToken(NEWLINE,'\n',1,0)
LexToken(PRINT,'print',2,1)
LexToken(STRING,'"\\nCycle, if, else\\n"',2,7)
LexToken(NEWLINE,'\n\n',2,29)
LexToken(ID,'a',4,31)
LexToken(ASS_OP,'=',4,32)
LexToken(INTEGER,1,4,33)
LexToken(NEWLINE,'\n',4,34)
LexToken(WHILE,'while',5,35)
LexToken(ID,'a',5,41)
LexToken(LT,'<',5,42)
LexToken(INTEGER,11,5,43)
LexToken(DO,'do',5,46)
LexToken(NEWLINE,'\n',5,48)
LexToken(PRINT,'print',6,53)
LexToken(ID,'a',6,59)
LexToken(NEWLINE,'\n',6,60)
LexToken(IF,'if',7,65)
LexToken(ID,'a',7,68)
LexToken(MODULO,'%',7,69)
LexToken(INTEGER,2,7,70)
LexToken(EQ,'==',7,72)
LexToken(INTEGER,0,7,75)
LexToken(THEN,'then',7,77)
LexToken(NEWLINE,'\n',7,81)
LexToken(PRINT,'print',8,90)
LexToken(STRING,'" Romero"',8,96)
LexToken(NEWLINE,'\n',8,106)
LexToken(ELSE,'else',9,111)
LexToken(NEWLINE,'\n',9,115)
LexToken(PRINT,'print',10,124)
LexToken(STRING,'" Ramon"',10,130)
LexToken(NEWLINE,'\n',10,139)
LexToken(END,'end',11,144)
LexToken(NEWLINE,'\n',11,147)
LexToken(ID,'a',12,152)
LexToken(ASS_OP,'=',12,154)
LexToken(ID,'a',12,156)
LexToken(PLUS,'+',12,158)
LexToken(INTEGER,1,12,160)
LexToken(NEWLINE,'\n',12,161)
LexToken(PRINT,'print',13,166)
LexToken(STRING,'"\\n"',13,172)
LexToken(NEWLINE,'\n\n',13,177)
LexToken(END,'end',15,179)


>>> PARSER ERRORS
None
<parser.Node object at 0x10355e908>
<parser.Node object at 0x10355e748>
None
<parser.Node object at 0x10355ea90>
<parser.Node object at 0x10355e978>
<parser.Node object at 0x10355ec50>
<parser.Node object at 0x10355ea20>
<parser.Node object at 0x10355e8d0>
None
<parser.Node object at 0x10355ed68>
<parser.Node object at 0x10355ed30>
<parser.Node object at 0x10355ec18>
<parser.Node object at 0x10355ee10>
<parser.Node object at 0x10355ecf8>
<parser.Node object at 0x10355eba8>
<parser.Node object at 0x10355eef0>
<parser.Node object at 0x10357c128>
None
<parser.Node object at 0x10357c198>
<parser.Node object at 0x10357c160>
<parser.Node object at 0x10355efd0>
<parser.Node object at 0x10355ef98>
None
<parser.Node object at 0x10357c240>
<parser.Node object at 0x10357c0f0>
<parser.Node object at 0x10357c278>
<parser.Node object at 0x10357c358>
<parser.Node object at 0x10357c2b0>
None
<parser.Node object at 0x10357c4a8>
<parser.Node object at 0x10357c390>
<parser.Node object at 0x10357c470>
None
<parser.Node object at 0x10357c630>
<parser.Node object at 0x10357c208>
<parser.Node object at 0x10357c5f8>
<parser.Node object at 0x10357c3c8>
<parser.Node object at 0x10357c048>
<parser.Node object at 0x10357c6a0>
<parser.Node object at 0x10357c518>
None
<parser.Node object at 0x10357c7b8>
<parser.Node object at 0x10357c780>
<parser.Node object at 0x10357c400>
<parser.Node object at 0x10357c828>
<parser.Node object at 0x10357c4e0>
<parser.Node object at 0x10357c860>
<parser.Node object at 0x10357c2e8>
None
<parser.Node object at 0x10357c7f0>
<parser.Node object at 0x10357c8d0>
<parser.Node object at 0x10357c748>
<parser.Node object at 0x10357c978>
<parser.Node object at 0x10357c588>
<parser.Node object at 0x10357c0b8>
None
<parser.Node object at 0x10355e860>
<parser.Node object at 0x10355ecf8>
<parser.Node object at 0x10355ee80>
<parser.Node object at 0x10355ebe0>
<parser.Node object at 0x103420ba8>


> TEST_CASE:  ./test_set1/8.rb


>>> LEXER
LexToken(NEWLINE,'\n',1,0)
LexToken(PRINT,'print',2,1)
LexToken(STRING,'"\\nWhat is you name ? ->"',2,7)
LexToken(NEWLINE,'\n',2,32)
LexToken(ID,'name',3,33)
LexToken(ASS_OP,'=',3,38)
LexToken(INPUT_S,'gets.chomp',3,40)
LexToken(NEWLINE,'\n\n',3,50)
LexToken(PRINT,'print',5,52)
LexToken(STRING,'"Hola! "',5,58)
LexToken(PLUS,'+',5,66)
LexToken(ID,'name',5,68)
LexToken(PLUS,'+',5,73)
LexToken(STRING,'"\\n"',5,74)
LexToken(NEWLINE,'\n\n',5,78)
LexToken(PRINT,'print',7,80)
LexToken(STRING,'"Age? ->"',7,86)
LexToken(NEWLINE,'\n',7,95)
LexToken(ID,'n',8,96)
LexToken(ASS_OP,'=',8,98)
LexToken(INPUT_I,'gets.chomp.to_i',8,100)
LexToken(NEWLINE,'\n',8,115)
LexToken(ID,'n',9,116)
LexToken(ASS_OP,'=',9,118)
LexToken(ID,'n',9,120)
LexToken(PLUS,'+',9,121)
LexToken(INTEGER,1,9,122)
LexToken(NEWLINE,'\n\n',9,123)
LexToken(PRINT,'print',11,125)
LexToken(STRING,'"\\nnext year you will have "',11,131)
LexToken(NEWLINE,'\n',11,160)
LexToken(PRINT,'print',12,161)
LexToken(ID,'n',12,167)
LexToken(NEWLINE,'\n',12,169)
LexToken(PRINT,'print',13,170)
LexToken(STRING,'"\\n"',13,176)
LexToken(NEWLINE,'\n',13,180)


>>> PARSER ERRORS
None
<parser.Node object at 0x10355d908>
<parser.Node object at 0x10355d748>
<parser.Node object at 0x10355db38>
<parser.Node object at 0x10355dbe0>
<parser.Node object at 0x10355d9b0>
None
<parser.Node object at 0x10355dac8>
<parser.Node object at 0x10355d978>
<parser.Node object at 0x10355dc18>
<parser.Node object at 0x10355dd68>
None
<parser.Node object at 0x10355de80>
<parser.Node object at 0x10355de48>
<parser.Node object at 0x10355dd30>
<parser.Node object at 0x10355deb8>
<parser.Node object at 0x10355de10>
<parser.Node object at 0x10355dcf8>
<parser.Node object at 0x10355dfd0>
<parser.Node object at 0x10355d8d0>
None
<parser.Node object at 0x10355def0>
<parser.Node object at 0x10355df60>
<parser.Node object at 0x10357b208>
<parser.Node object at 0x10357b278>
<parser.Node object at 0x10355df28>
<parser.Node object at 0x10357b390>
<parser.Node object at 0x10357b320>
None
<parser.Node object at 0x10357b438>
<parser.Node object at 0x10357b400>
<parser.Node object at 0x10355ddd8>
<parser.Node object at 0x10357b4e0>
<parser.Node object at 0x10357b3c8>
<parser.Node object at 0x10357b518>
<parser.Node object at 0x10357b128>
None
<parser.Node object at 0x10357b470>
<parser.Node object at 0x10357b588>
<parser.Node object at 0x10357b7b8>
<parser.Node object at 0x10357b6d8>
None
<parser.Node object at 0x10357b780>
<parser.Node object at 0x10357b828>
<parser.Node object at 0x10357b4a8>
<parser.Node object at 0x10357b898>
<parser.Node object at 0x10357b748>
<parser.Node object at 0x10357b630>
<parser.Node object at 0x10357b2e8>
<parser.Node object at 0x10357b160>
<parser.Node object at 0x10357b080>
<parser.Node object at 0x10355df98>
<parser.Node object at 0x10355dc50>
<parser.Node object at 0x103411ba8>


> TEST_CASE:  ./test_set1/9.rb


>>> LEXER
LexToken(NEWLINE,'\n\n',1,19)
LexToken(PRINT,'print',3,21)
LexToken(STRING,'"\\nThis program contains a single word/line comment\\n"',3,27)
LexToken(NEWLINE,'\n\n\n\n\n',3,81)
LexToken(NEWLINE,'\n\n',8,125)
LexToken(PRINT,'print',10,127)
LexToken(STRING,'"\\nThis program contains a multiline comment\\n"',10,133)
LexToken(NEWLINE,'\n\n\n\n\n',10,180)
LexToken(NEWLINE,'\n\n',15,234)
LexToken(ID,'my_num',17,236)
LexToken(ASS_OP,'=',17,243)
LexToken(INTEGER,25,17,245)
LexToken(NEWLINE,'\n\n',17,247)
LexToken(PRINT,'print',19,249)
LexToken(ID,'my_num',19,255)
LexToken(NEWLINE,'\n\n\n\n',19,261)
LexToken(NEWLINE,'\n\n',23,527)
LexToken(CONSTANT,'Const',25,529)
LexToken(ASS_OP,'=',25,535)
LexToken(INTEGER,22,25,537)
LexToken(NEWLINE,'\n',25,539)
LexToken(PRINT,'print',26,540)
LexToken(CONSTANT,'Const',26,546)
LexToken(NEWLINE,'\n',26,551)
LexToken(PRINT,'print',27,552)
LexToken(STRING,'"\\n"',27,558)
LexToken(NEWLINE,'\n\n\n\n',27,562)
LexToken(NEWLINE,'\n\n',31,594)
LexToken(ID,'full_name',33,596)
LexToken(ASS_OP,'=',33,606)
LexToken(STRING,'"Ramon\\n"',33,608)
LexToken(NEWLINE,'\n',33,617)
LexToken(PRINT,'print',34,618)
LexToken(STRING,'"\\nMy name is "',34,624)
LexToken(PLUS,'+',34,640)
LexToken(ID,'full_name',34,642)
LexToken(NEWLINE,'\n\n\n',34,651)
LexToken(NEWLINE,'\n\n',37,680)
LexToken(PRINT,'print',39,682)
LexToken(STRING,'"\\nBool, int and string\\n"',39,688)
LexToken(NEWLINE,'\n\n\n',39,715)
LexToken(ID,'first_arg',42,718)
LexToken(ASS_OP,'=',42,728)
LexToken(BOOL,'true',42,730)
LexToken(NEWLINE,'\n',42,734)
LexToken(ID,'secorn_arg',43,735)
LexToken(ASS_OP,'=',43,746)
LexToken(BOOL,'false',43,748)
LexToken(NEWLINE,'\n',43,753)
LexToken(ID,'boolean_eval',44,754)
LexToken(ASS_OP,'=',44,767)
LexToken(ID,'first_arg',44,769)
LexToken(OR,'or',44,779)
LexToken(ID,'secorn_arg',44,782)
LexToken(NEWLINE,'\n',44,792)
LexToken(CONSTANT,'Cons',45,793)
LexToken(ASS_OP,'=',45,798)
LexToken(INTEGER,42,45,800)
LexToken(NEWLINE,'\n',45,802)
LexToken(ID,'n',46,803)
LexToken(ASS_OP,'=',46,804)
LexToken(INTEGER,0,46,805)
LexToken(NEWLINE,'\n',46,806)
LexToken(ID,'n',47,807)
LexToken(ASS_OP,'=',47,808)
LexToken(ID,'n',47,809)
LexToken(PLUS,'+',47,810)
LexToken(INTEGER,1,47,811)
LexToken(NEWLINE,'\n\n\n',47,812)
LexToken(ID,'name',50,815)
LexToken(ASS_OP,'=',50,820)
LexToken(STRING,'"Ramon "',50,822)
LexToken(PLUS,'+',50,831)
LexToken(STRING,'"Romero"',50,833)
LexToken(NEWLINE,'\n\n',50,841)
LexToken(PRINT,'print',52,843)
LexToken(ID,'boolean_eval',52,849)
LexToken(NEWLINE,'\n',52,862)
LexToken(PRINT,'print',53,863)
LexToken(STRING,'"\\n"',53,869)
LexToken(NEWLINE,'\n',53,873)
LexToken(PRINT,'print',54,874)
LexToken(ID,'n',54,880)
LexToken(NEWLINE,'\n',54,882)
LexToken(PRINT,'print',55,883)
LexToken(STRING,'"\\n"',55,889)
LexToken(NEWLINE,'\n',55,893)
LexToken(PRINT,'print',56,894)
LexToken(CONSTANT,'Cons',56,900)
LexToken(NEWLINE,'\n',56,904)
LexToken(PRINT,'print',57,905)
LexToken(STRING,'"\\n"',57,911)
LexToken(NEWLINE,'\n',57,915)
LexToken(PRINT,'print',58,916)
LexToken(ID,'name',58,922)
LexToken(NEWLINE,'\n\n\n\n\n\n\n\n\n',58,926)
LexToken(PRINT,'print',67,935)
LexToken(STRING,'"\\nCycle, if, else\\n"',67,941)
LexToken(NEWLINE,'\n\n',67,963)
LexToken(ID,'a',69,965)
LexToken(ASS_OP,'=',69,966)
LexToken(INTEGER,1,69,967)
LexToken(NEWLINE,'\n',69,968)
LexToken(WHILE,'while',70,969)
LexToken(ID,'a',70,975)
LexToken(LT,'<',70,976)
LexToken(INTEGER,11,70,977)
LexToken(DO,'do',70,980)
LexToken(NEWLINE,'\n',70,982)
LexToken(PRINT,'print',71,987)
LexToken(ID,'a',71,993)
LexToken(NEWLINE,'\n',71,994)
LexToken(IF,'if',72,999)
LexToken(ID,'a',72,1002)
LexToken(MODULO,'%',72,1003)
LexToken(INTEGER,2,72,1004)
LexToken(EQ,'==',72,1006)
LexToken(INTEGER,0,72,1009)
LexToken(THEN,'then',72,1011)
LexToken(NEWLINE,'\n',72,1015)
LexToken(PRINT,'print',73,1024)
LexToken(STRING,'" Romero"',73,1030)
LexToken(NEWLINE,'\n',73,1040)
LexToken(ELSE,'else',74,1045)
LexToken(NEWLINE,'\n',74,1049)
LexToken(PRINT,'print',75,1058)
LexToken(STRING,'" Ramon"',75,1064)
LexToken(NEWLINE,'\n',75,1073)
LexToken(END,'end',76,1078)
LexToken(NEWLINE,'\n',76,1081)
LexToken(ID,'a',77,1086)
LexToken(ASS_OP,'=',77,1088)
LexToken(ID,'a',77,1090)
LexToken(PLUS,'+',77,1092)
LexToken(INTEGER,1,77,1094)
LexToken(NEWLINE,'\n',77,1095)
LexToken(PRINT,'print',78,1100)
LexToken(STRING,'"\\n"',78,1106)
LexToken(NEWLINE,'\n\n',78,1111)
LexToken(END,'end',80,1113)
LexToken(NEWLINE,'\n\n\n\n',80,1116)
LexToken(PRINT,'print',84,1120)
LexToken(STRING,'"\\nWhat is you name ? ->"',84,1126)
LexToken(NEWLINE,'\n',84,1151)
LexToken(ID,'name',85,1152)
LexToken(ASS_OP,'=',85,1157)
LexToken(INPUT_S,'gets.chomp',85,1159)
LexToken(NEWLINE,'\n\n',85,1169)
LexToken(PRINT,'print',87,1171)
LexToken(STRING,'"Hola! "',87,1177)
LexToken(PLUS,'+',87,1185)
LexToken(ID,'name',87,1187)
LexToken(PLUS,'+',87,1192)
LexToken(STRING,'"\\n"',87,1193)
LexToken(NEWLINE,'\n\n',87,1197)
LexToken(PRINT,'print',89,1199)
LexToken(STRING,'"Age? ->"',89,1205)
LexToken(NEWLINE,'\n',89,1214)
LexToken(ID,'n',90,1215)
LexToken(ASS_OP,'=',90,1217)
LexToken(INPUT_I,'gets.chomp.to_i',90,1219)
LexToken(NEWLINE,'\n',90,1234)
LexToken(ID,'n',91,1235)
LexToken(ASS_OP,'=',91,1237)
LexToken(ID,'n',91,1239)
LexToken(PLUS,'+',91,1240)
LexToken(INTEGER,1,91,1241)
LexToken(NEWLINE,'\n\n',91,1242)
LexToken(PRINT,'print',93,1244)
LexToken(STRING,'"\\nnext year you will have "',93,1250)
LexToken(NEWLINE,'\n',93,1279)
LexToken(PRINT,'print',94,1280)
LexToken(ID,'n',94,1286)
LexToken(NEWLINE,'\n',94,1288)
LexToken(PRINT,'print',95,1289)
LexToken(STRING,'"\\n"',95,1295)
LexToken(NEWLINE,'\n\n\n\n',95,1299)


>>> PARSER ERRORS
None
<parser.Node object at 0x10355e8d0>
<parser.Node object at 0x10355e898>
None
<parser.Node object at 0x10355ea58>
<parser.Node object at 0x103420ba8>
None
<parser.Node object at 0x10355ed30>
<parser.Node object at 0x10355ec50>
<parser.Node object at 0x10355ee48>
<parser.Node object at 0x10355ebe0>
None
<parser.Node object at 0x10355efd0>
<parser.Node object at 0x10355ef60>
<parser.Node object at 0x10357c128>
<parser.Node object at 0x10355eef0>
None
<parser.Node object at 0x10357c0f0>
<parser.Node object at 0x10355edd8>
None
<parser.Node object at 0x10357c320>
<parser.Node object at 0x10357c3c8>
None
<parser.Node object at 0x10357c278>
<parser.Node object at 0x10357c358>
<parser.Node object at 0x10357c4e0>
<parser.Node object at 0x10357c588>
<parser.Node object at 0x10357c550>
<parser.Node object at 0x10357c630>
<parser.Node object at 0x10357c518>
<parser.Node object at 0x10357c6a0>
<parser.Node object at 0x10357c2e8>
None
<parser.Node object at 0x10357c748>
<parser.Node object at 0x10357c7b8>
None
<parser.Node object at 0x10357c710>
<parser.Node object at 0x10357c860>
None
<parser.Node object at 0x10357c9b0>
<parser.Node object at 0x10357c4a8>
<parser.Node object at 0x10357cb70>
<parser.Node object at 0x10357cac8>
<parser.Node object at 0x10357c908>
<parser.Node object at 0x10357cba8>
<parser.Node object at 0x10357cc50>
<parser.Node object at 0x10357cc18>
<parser.Node object at 0x10357ccc0>
<parser.Node object at 0x10357cbe0>
<parser.Node object at 0x10357cd30>
<parser.Node object at 0x10357c5c0>
None
<parser.Node object at 0x10357ce80>
<parser.Node object at 0x10357cd68>
None
<parser.Node object at 0x10357cf98>
<parser.Node object at 0x10357cc88>
<parser.Node object at 0x1035800f0>
<parser.Node object at 0x103580080>
None
<parser.Node object at 0x103580198>
<parser.Node object at 0x103580160>
<parser.Node object at 0x10357ce10>
<parser.Node object at 0x103580240>
<parser.Node object at 0x103580128>
<parser.Node object at 0x103580278>
<parser.Node object at 0x10357ccf8>
None
<parser.Node object at 0x103580208>
<parser.Node object at 0x10357cf28>
None
<parser.Node object at 0x1035804a8>
<parser.Node object at 0x103580470>
<parser.Node object at 0x103580400>
<parser.Node object at 0x103580550>
<parser.Node object at 0x103580438>
<parser.Node object at 0x103580588>
<parser.Node object at 0x1035802e8>
<parser.Node object at 0x1035806a0>
<parser.Node object at 0x1035801d0>
None
<parser.Node object at 0x103580518>
<parser.Node object at 0x103580710>
<parser.Node object at 0x103580940>
<parser.Node object at 0x103580860>
None
<parser.Node object at 0x103580908>
<parser.Node object at 0x1035809b0>
<parser.Node object at 0x103580c18>
<parser.Node object at 0x103580b00>
None
<parser.Node object at 0x103580be0>
<parser.Node object at 0x103580c88>
<parser.Node object at 0x103580ef0>
<parser.Node object at 0x103580dd8>
None
<parser.Node object at 0x103580eb8>
<parser.Node object at 0x103580f60>
None
<parser.Node object at 0x103584208>
<parser.Node object at 0x103580d68>
<parser.Node object at 0x103584320>
<parser.Node object at 0x103584198>
<parser.Node object at 0x103584128>
None
<parser.Node object at 0x103584400>
<parser.Node object at 0x1035843c8>
<parser.Node object at 0x103584358>
<parser.Node object at 0x1035844a8>
<parser.Node object at 0x103584390>
<parser.Node object at 0x1035842e8>
<parser.Node object at 0x103584588>
<parser.Node object at 0x103584780>
None
<parser.Node object at 0x1035847f0>
<parser.Node object at 0x1035847b8>
<parser.Node object at 0x103584668>
<parser.Node object at 0x103584630>
None
<parser.Node object at 0x103584898>
<parser.Node object at 0x103584748>
<parser.Node object at 0x1035848d0>
<parser.Node object at 0x1035849b0>
<parser.Node object at 0x103584908>
None
<parser.Node object at 0x103584b00>
<parser.Node object at 0x1035849e8>
<parser.Node object at 0x103584ac8>
None
<parser.Node object at 0x103584c88>
<parser.Node object at 0x103584860>
<parser.Node object at 0x103584c50>
<parser.Node object at 0x103584a20>
<parser.Node object at 0x1035846a0>
<parser.Node object at 0x103584cf8>
<parser.Node object at 0x103584b70>
None
<parser.Node object at 0x103584e10>
<parser.Node object at 0x103584dd8>
<parser.Node object at 0x103584a58>
<parser.Node object at 0x103584e80>
<parser.Node object at 0x103584b38>
<parser.Node object at 0x103584eb8>
<parser.Node object at 0x103584940>
None
<parser.Node object at 0x103584e48>
<parser.Node object at 0x103584f28>
<parser.Node object at 0x103584da0>
<parser.Node object at 0x103584fd0>
<parser.Node object at 0x103584be0>
<parser.Node object at 0x103584710>
None
<parser.Node object at 0x103584048>
None
<parser.Node object at 0x103584cc0>
<parser.Node object at 0x103584550>
<parser.Node object at 0x103584f60>
<parser.Node object at 0x103584588>
<parser.Node object at 0x103584400>
None
<parser.Node object at 0x103584438>
<parser.Node object at 0x103584128>
<parser.Node object at 0x103584be0>
<parser.Node object at 0x1035846d8>
None
<parser.Node object at 0x1035849b0>
<parser.Node object at 0x103584908>
<parser.Node object at 0x103584a20>
<parser.Node object at 0x1035848d0>
<parser.Node object at 0x103584d30>
<parser.Node object at 0x1035846a0>
<parser.Node object at 0x103584780>
<parser.Node object at 0x103584d68>
None
<parser.Node object at 0x103584748>
<parser.Node object at 0x103584630>
<parser.Node object at 0x103584c88>
<parser.Node object at 0x103584fd0>
<parser.Node object at 0x103584b00>
<parser.Node object at 0x103584e80>
<parser.Node object at 0x103584ef0>
None
<parser.Node object at 0x103584a58>
<parser.Node object at 0x103584cf8>
<parser.Node object at 0x103584898>
<parser.Node object at 0x103584da0>
<parser.Node object at 0x103584b70>
<parser.Node object at 0x103584f28>
<parser.Node object at 0x103584ba8>
None
<parser.Node object at 0x103584dd8>
<parser.Node object at 0x103584f98>
<parser.Node object at 0x10358a1d0>
<parser.Node object at 0x103584e10>
None
<parser.Node object at 0x10358a198>
<parser.Node object at 0x10358a240>
<parser.Node object at 0x10358a0f0>
<parser.Node object at 0x10358a2b0>
<parser.Node object at 0x103584860>
<parser.Node object at 0x10358a048>
<parser.Node object at 0x103584eb8>
<parser.Node object at 0x103584a90>
<parser.Node object at 0x1035847f0>
<parser.Node object at 0x1035845c0>
<parser.Node object at 0x103584198>
<parser.Node object at 0x1035844a8>
<parser.Node object at 0x1035842b0>
<parser.Node object at 0x103584160>
<parser.Node object at 0x103580fd0>
<parser.Node object at 0x103580e48>
<parser.Node object at 0x103580cf8>
<parser.Node object at 0x103580b70>
<parser.Node object at 0x103580a20>
<parser.Node object at 0x1035808d0>
<parser.Node object at 0x103580780>
<parser.Node object at 0x103580668>
<parser.Node object at 0x103580390>
<parser.Node object at 0x103580048>
<parser.Node object at 0x10357ca20>
<parser.Node object at 0x10357cda0>
<parser.Node object at 0x10357ca90>
<parser.Node object at 0x10357c978>
<parser.Node object at 0x10357c898>
<parser.Node object at 0x10357c6d8>
<parser.Node object at 0x10357c470>
<parser.Node object at 0x10357c198>
<parser.Node object at 0x10357c208>
<parser.Node object at 0x10355ef98>
<parser.Node object at 0x10355e7b8>
<parser.Node object at 0x10355eda0>
<parser.Node object at 0x10355eac8>
<parser.Node object at 0x10355e908>
<parser.Node object at 0x10355e748>


--------------------------------


####################################################


--------------------------------


Sintactical Errors Test Cases


 > TEST_CASE:: ./test_set2/1.rb


>>> LEXER
LexToken(NEWLINE,'\n',1,60)
LexToken(NEWLINE,'\n\n\n\n',2,111)
LexToken(INTEGER,25,6,115)
LexToken(ASS_OP,'=',6,118)
LexToken(NEWLINE,'\n',6,120)
LexToken(ID,'my',7,121)
LexToken(ID,'num',7,124)
LexToken(NEWLINE,'\n\n\n',7,128)


>>> PARSER ERRORS
Syntax error: Unexpected INTEGER(25) on line 6


 > TEST_CASE:: ./test_set2/2.rb


>>> LEXER
LexToken(NEWLINE,'\n',1,49)
LexToken(NEWLINE,'\n',2,108)
LexToken(ID,'my',3,109)
LexToken(ID,'num',3,112)
LexToken(ASS_OP,'=',3,116)
LexToken(INTEGER,25,3,118)
LexToken(NEWLINE,'\n\n\n\n',3,120)
LexToken(ID,'boolean',7,124)
LexToken(ASS_OP,'=',7,132)
LexToken(NEWLINE,'\n',7,134)
LexToken(BOOL,'false',8,135)
LexToken(NEWLINE,'\n\n\n',8,140)
LexToken(CONSTANT,'Cons',11,143)
LexToken(NEWLINE,'\n',11,148)
LexToken(ASS_OP,'=',12,149)
LexToken(NEWLINE,'\n',12,150)
LexToken(INTEGER,25,13,151)
LexToken(NEWLINE,'\n\n\n',13,153)
LexToken(ID,'stri',16,156)
LexToken(NEWLINE,'\n',16,161)
LexToken(ASS_OP,'=',17,162)
LexToken(NEWLINE,'\n',17,163)
LexToken(STRING,'"okoko"',18,164)
LexToken(NEWLINE,'\n',18,171)


>>> PARSER ERRORS
Syntax error: Unexpected ID(num) on line 3
Syntax error: Unexpected NEWLINE(
) on line 7


 > TEST_CASE:: ./test_set2/3.rb


>>> LEXER
LexToken(NEWLINE,'\n',1,39)
LexToken(NEWLINE,'\n\n\n',2,89)
LexToken(WHILE,'while',5,92)
LexToken(LT,'<',5,99)
LexToken(INTEGER,1,5,101)
LexToken(INTEGER,2,5,103)
LexToken(DO,'do',5,105)
LexToken(NEWLINE,'\n',5,107)
LexToken(PRINT,'print',6,113)
LexToken(STRING,'"hello"',6,119)
LexToken(NEWLINE,'\n',6,126)
LexToken(END,'end',7,131)


>>> PARSER ERRORS
Syntax error: Unexpected LT(<) on line 5
None
<parser.Node object at 0x10355e908>
<parser.Node object at 0x10355e7b8>
<parser.Node object at 0x10355e748>
<parser.Node object at 0x103420ba8>
Syntax error: Unexpected END(end) on line 7
